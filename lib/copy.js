// Generated by CoffeeScript 1.3.3
var copyDir, copyGit, copySVN, exec, fsExists, gitReg, logger, ncp, pwd, spawn, svnReg, sysFs, sysPath, _ref;

sysFs = require('fs');

sysPath = require('path');

_ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;

ncp = require('ncp').ncp;

logger = require("./helper").logger;

pwd = process.cwd();

fsExists = sysFs.exists || sysPath.exists;

gitReg = /^(https|http)\:.*git/;

svnReg = /^(https|http)\:.*svn/;

copyGit = function(from, dest, cb) {
  var args, git;
  args = ["clone", from, dest];
  git = spawn("git", args);
  git.stdout.on("data", function(data) {
    if (data != null) {
      return logger.info("stdout:" + data);
    }
  });
  git.stderr.on("data", function(data) {
    if (data != null) {
      return logger.error("stderr:" + data);
    }
  });
  return git.on("exit", function(code) {
    if (code === 0) {
      logger.info("clone complete...");
    }
    return logger.debug("child_process_spawn exit with code " + code);
  });
};

copySVN = function(from, dest) {
  var args, git;
  args = ["checkout", from, dest];
  git = spawn("svn", args);
  git.stdout.on("data", function(data) {
    if (data != null) {
      return logger.info("stdout:" + data);
    }
  });
  git.stderr.on("data", function(data) {
    if (data != null) {
      return logger.error("stderr:" + data);
    }
  });
  return git.on("exit", function(code) {
    if (code === 0) {
      logger.info("clone complete...");
    }
    return logger.debug("child_process_spawn exit with code " + code);
  });
};

copyDir = function(from, dest) {
  from = sysPath.resolve(pwd, from);
  return ncp(from, dest, function(err) {
    if (err != null) {
      return logger.error(err);
    }
  });
};

module.exports = function(from, dest) {
  if (dest == null) {
    dest = pwd;
  }
  dest = sysPath.resolve(pwd, dest);
  if (gitReg.test(from)) {
    return copyGit(from, dest);
  }
  if (svnReg.test(from)) {
    return copySvn(from, dest);
  }
  return copyDir(from, dest);
};
