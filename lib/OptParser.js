// Generated by CoffeeScript 1.3.3
var Command, EventEmitter, OptParser, fs, multiSwitches, typeOf, unicode,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

fs = require("fs");

EventEmitter = require("events").EventEmitter;

multiSwitches = /^-(\w{2,})$/;

unicode = "(?:[\\w\\u00a1-\\uFFFF-])";

typeOf = function(obj) {
  if (obj === null || obj === void 0) {
    return String(obj);
  } else {
    return Object.prototype.toString.call(obj).slice(8, -1);
  }
};

Command = (function() {

  function Command(name, flags, switchs, args) {}

  return Command;

})();

OptParser = (function(_super) {

  __extends(OptParser, _super);

  function OptParser(opts) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === "string") {
      opts = JSON.parse(fs.readFileSync(opts));
    }
    if (opts != null) {
      this.on(opts);
    }
  }

  OptParser.prototype.config = function(opts) {};

  OptParser.prototype.options = function() {
    var callback, opts, _i;
    opts = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
  };

  OptParser.prototype.parse = function(argv) {};

  OptParser.prototype.action = function() {};

  OptParser.prototype.run = function(argv) {};

  return OptParser;

})(EventEmitter);

module.exports = function(opts) {
  return new OptParser(opts);
};
