// Generated by CoffeeScript 1.3.3
'use strict';

var argv, autoReload, express, fs, fsExist, http, io, ip, pwd, sysPath, util, watch;

fs = require('fs');

sysPath = require('path');

express = require('express');

http = require('http');

io = require('socket.io');

watch = require('watch-tree-maintained');

util = require('./helper').util;

pwd = process.cwd();

argv = process.argv.slice(2);

ip = util.getLocalIP();

fsExist = fs.existsSync || sysPath.existsSync;

autoReload = function(server, app, path) {
  var matches;
  if (path == null) {
    path = pwd;
  }
  app.get("/reload.js", function(req, res) {
    var stream;
    res.setHeader("Content-Type", "text/javascript");
    stream = fs.createReadStream(sysPath.join(__dirname, '..', 'vendor', 'socket_autoreload.js'), {
      encoding: 'utf8'
    });
    stream.pipe(res, {
      end: false
    });
    stream.on("end", function() {
      console.log("stream end");
      res.write("window.onload=function(){\n  var location = window.location,\n      origin = location.protocol+\"//\"+location.host;\n  var socket = io.connect(origin); \n  var stylesheets = document.getElementsByTagName(\"link\");\n  var cacheBuster = function(url){\n      var date = Math.round(+new Date/1000).toString();\n      url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n      return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n  var updateStyle = function(stylePathName){\n    for(var i = stylesheets.length;i--;){\n      var href = stylesheets[i].getAttribute(\"href\");\n      stylesheets[i].setAttribute(\"href\",cacheBuster(stylesheets[i].getAttribute(\"href\")));\n    }\n    return true;\n  }\n  socket.on('update', function(data){\n    if(data.css && updateStyle(data.css)) return true;\n    window.location.reload();     \n  })\n}");
      return res.end();
    });
    return req.on('close', function() {
      return stream.destroy();
    });
  });
  matches = ['js', 'css', 'less', 'html', 'xhtml', 'htm', 'tpl', 'md', 'markdown'];
  console.log("watching the flies in " + pwd + " and reload||refresh the page");
  io = io.listen(server);
  return io.sockets.on("connection", function(socket) {
    var watcher;
    watcher = (require("watch-tree-maintained")).watchTree(path, {
      "match": "\." + matches.join('$|\\.'),
      "sample-rate": 1
    });
    return watcher.on("fileModified", function(path) {
      var data;
      data = {
        "path": path
      };
      if (~path.indexOf(".css")) {
        data.css = path.slice(pwd.length);
      }
      return socket.emit("update", data);
    });
  });
};

module.exports = function(port, hasAutoreload) {
  var address, app, ipInfo, server, _i, _len;
  if (port == null) {
    port = 8008;
  }
  if (hasAutoreload == null) {
    hasAutoreload = true;
  }
  app = express();
  if (hasAutoreload) {
    app.get(/^(.*(\.html))$/, function(req, res, next) {
      var file, filepath, seps;
      filepath = sysPath.join(pwd, req.params[0]);
      if (!fsExist(filepath)) {
        filepath = sysPath.join(filepath, "index.html");
      }
      if (fsExist(filepath)) {
        file = fs.readFileSync(filepath, "utf8");
        if (!~file.indexOf("/reload.js")) {
          seps = file.split("</head>");
          seps.splice(1, 0, '<script src="/reload.js"></script></head>');
          file = seps.join("");
        }
        res.setHeader("Content-Type", "text/html");
        res.setHeader("Content-Length", Buffer.byteLength(file));
        return res.send(file);
      } else {
        return next();
      }
    });
  }
  app.configure(function() {
    app.use(express.bodyParser());
    return app.use(express["static"](pwd));
  });
  ipInfo = "";
  for (_i = 0, _len = ip.length; _i < _len; _i++) {
    address = ip[_i];
    ipInfo += "\n\t<<" + address + ">>   ";
  }
  server = http.createServer(app);
  if (hasAutoreload) {
    autoReload(server, app);
  }
  return server.listen(port, function() {
    console.log("server start at localhost:8008");
    console.log("your computer has no-interval ip as follow: " + ipInfo + ". choose one for outer watching");
    return (require("open"))("http://localhost:" + port + "/index.html");
  });
};
